<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	   xmlns:aop="http://www.springframework.org/schema/aop" 
	   xmlns:util="http://www.springframework.org/schema/util" 
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
       http://www.springframework.org/schema/beans/spring-beans.xsd 
       http://www.springframework.org/schema/util 
       http://www.springframework.org/schema/util/spring-util.xsd 
       http://www.springframework.org/schema/aop 
       http://www.springframework.org/schema/aop/spring-aop.xsd" 
       default-lazy-init="true">

    <description>Shiro Configuration</description>
    
        <!-- 用于控制并发登录人数  -->
	    <bean id="forceLogoutFilter" class="com.ccnet.core.shiro.KillOutSessionControlFilter">
	        <property name="cacheManager" ref="cacheManager"/>
	        <property name="sessionManager" ref="sessionManager"/>
	        <property name="kickoutAfter" value="false"/>
	        <property name="maxSession" value="2"/>
	        <property name="kickoutUrl" value="/loginIndex?kickout=1"/>
	    </bean>
    
		<!-- Shiro Filter -->
		<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
			<property name="securityManager" ref="securityManager" />		
			<property name="loginUrl" value="/gologin" />		
			<property name="successUrl" value="/backstage/index" />	
			<property name="unauthorizedUrl" value="/gologin" />
			<property name="filters">
              <map>
                <entry key="kickout" value-ref="forceLogoutFilter"/>
              </map>
            </property>
			<!-- 
			     anon:匿名拦截器，即不需要登录即可访问；一般用于静态资源过滤
                 authc:如果没有登录会跳到相应的登录页面登录
                 user:用户拦截器，用户已经身份验证/记住我登录的都可 
            -->
			<property name="filterChainDefinitions">
				<value>
					/static/** 				   = anon
		           	/static/js/admin/login/**  = anon
					/static/js/admin/**        = authc
					/static/js/admincps/**     = authc
					/static/js/ueditor/** 	   = authc
					/static/js/ztree/** 	   = authc
					/static/js/charts/** 	   = authc
					/static/js/bfileinput/**   = authc
				    /favicon.ico               = anon
		           	/captcha/**		           = anon
		           	/gologin/**			 	   = anon
		            /loginIndex/**		 	   = anon
		           	/adminLogin/**			   = anon
		           	/exterInt/**               = anon
		           	/admin/license/**  		   = anon
		           	/weixin/**				   = anon
		           	/upload/**                 = anon
		           	/**                        = authc
			  </value>
		  </property>
	</bean>
	
  	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="ShiroRealm" />
		<property name="sessionManager" ref="sessionManager"/>
		<!-- 使用下面配置的缓存管理器 -->
		<property name="cacheManager" ref="cacheManager" />
		<!--  
		<property name="rememberMeManager" ref="rememberMeManager"/>-->
	</bean>
	
	<!-- 会话管理器 -->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <property name="globalSessionTimeout" value="1800000"/>
        <property name="deleteInvalidSessions" value="true"/>
        <property name="sessionValidationSchedulerEnabled" value="true"/>
        <property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>
        <property name="sessionDAO" ref="sessionDAO"/>
        <property name="sessionIdCookieEnabled" value="true"/>
        <property name="sessionIdCookie" ref="sessionIdCookie"/>
    </bean>
    
    <!-- 会话验证调度器 -->
    <bean id="sessionValidationScheduler" class="com.ccnet.core.common.utils.security.Quartz2SessionValidationScheduler">
        <property name="sessionValidationInterval" value="1800000"/>
        <property name="sessionManager" ref="sessionManager"/>
    </bean>
	
    <!--ehcache-->
   <!-- 缓存管理器 使用Ehcache实现-->  
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">  
        <property name="cacheManagerConfigFile" value="classpath:ehcache/ehcache-shiro.xml"/>  
    </bean>
	
	<!-- 項目自定义的Realm -->
    <bean id="ShiroRealm" class="com.ccnet.core.shiro.ShiroRealm" >
    	<constructor-arg ref="cacheManager"/>   
    </bean>
    
     <!-- 会话ID生成器 -->
    <bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>

    <!-- 会话Cookie模板 -->
    <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="sid"/>
        <property name="httpOnly" value="true"/>
        <property name="maxAge" value="-1"/>
    </bean>
    
    <!-- rememberMe管理器 -->
    <bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="rememberMe"/>
        <property name="httpOnly" value="true"/>
        <property name="maxAge" value="2592000"/>
    </bean>

    <bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
        <!-- rememberMe cookie加密的密钥 建议每个项目都不一样 默认AES算法 密钥长度（128 256 512 位）-->
        <property name="cipherKey" value="#{T(org.apache.shiro.codec.Base64).decode('dG91dGlhbzEyMzQ1Ng==')}"/>
        <property name="cookie" ref="rememberMeCookie"/>
    </bean>

    <!-- 会话DAO -->
    <bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
        <property name="activeSessionsCacheName" value="shiro-activeSessionCache"/>
        <property name="sessionIdGenerator" ref="sessionIdGenerator"/>
    </bean>
       
    <!-- AOP式方法级权限检查 -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">
        <property name="proxyTargetClass" value="true" />
    </bean>
    
    <!-- Shiro生命周期处理器-->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
    
</beans>